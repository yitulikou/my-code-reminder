import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author mac
 */
public class Reducer {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException {
              try( BufferedReader file = new BufferedReader(new InputStreamReader(System.in)))
              {
                 String line;
                 String dayName = null;
                 String monthName = null;
                 String dayCurrentName = null;
                 String monthCurrentName = null;
                 int dayCurrentCount = 0;
                 int monthCurrentCount = 0;
                 int [] dayCount = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 Map<String, Integer> map = new HashMap<String, Integer>(); 
                 while((line = file.readLine()) != null )
                 {
                     String[] part = line.split("\\s+"); 
                     monthName = part[0];
                     String month = monthName.substring(monthName.length()-6);
                     String[] part2 = part[1].split("\\_");
                     dayName = part2[1];
                     int count = Integer.parseInt(part2[0]);
                     if(monthCurrentName!=null&&monthCurrentName.equals(monthName))
                     {
                         monthCurrentCount = monthCurrentCount + count;
                         if(dayCurrentName!=null&&dayCurrentName.equals(dayName))// for day
                         {
                             for(int i = 1; i <= 31;i++ )
                             {
                                if(Integer.parseInt(dayName)==i)
                                {
                                    dayCount[i-1] = dayCount[i-1] + count;
                                    dayCurrentCount = dayCount[i-1];
                                    
                                }
                             }
                         }
                         else
                         {
                             if(dayCurrentName!=null)
                             map.put(month+dayCurrentName, dayCurrentCount);
                            for(int i = 1; i <= 31;i++ )
                             {
                                if(Integer.parseInt(dayName)==i)
                                {
                                    dayCount[i-1] = dayCount[i-1] + count;
                                    dayCurrentCount = dayCount[i-1];
                                   
                                }
                             }
                             dayCurrentName = dayName;
                         }
                         if(dayCurrentName!=null&&dayCurrentName.equals(dayName))// last word
                         {
                             map.put(month+dayCurrentName, dayCurrentCount);
                         }
                         
                     }
                     
                     else
                     {
                         if(monthCurrentName!=null)//end of monthcount for the same name
                         {                            
                             if(monthCurrentCount>100000)
                             {
                                 String currentName = monthCurrentName.substring(0, monthCurrentName.length()-6);
                                 System.out.print(monthCurrentCount+"\t"+currentName);
                                 ArrayList mapList = new ArrayList<> (map.entrySet());
                                 List<Map.Entry<String, Integer>> mapEntry = mapList;
                                 Collections.sort(mapEntry, new Comparator<Map.Entry<String, Integer>>()
                                 {
                                    public int compare(Map.Entry<String, Integer> map1, Map.Entry<String, Integer> map2) 
                                    {
                                        int e = map1.getKey().compareTo(map2.getKey());
                                        return e;
                                    }});                                 
                                 for (Map.Entry<String, Integer> tem : mapEntry) 
                                 {
                                 String date = tem.getKey();
                                 int  countViews = tem.getValue();
                                 System.out.print("\t" + date + ":" + countViews);
                                }
                                 System.out.println();
                             }                         
                         }
                                 for(int i = 1;i <= 31; i++)
                                {
                                    String a = Integer.toString(i);
                                    if (i<10)
                                     a = "0" + a;
                                    String date = "201605" + a;
                                    map.put(date, 0); 
                                    dayCount[i-1] = 0;
                                }                         
                                 monthCurrentName = monthName;
                                 monthCurrentCount = count;
                                 for(int i = 1; i <= 31;i++ )
                                {
                                    if(Integer.parseInt(dayName)==i)
                                    {
                                        dayCount[i-1] = dayCount[i-1] + count;
                                        dayCurrentCount = dayCount[i-1];
                                    }
                                }
                                 dayCurrentName = dayName;
                                 
                            if(dayCurrentName!=null&&dayCurrentName.equals(dayName))// last word
                            {
                                map.put(monthCurrentName.substring(monthCurrentName.length()-6)+dayCurrentName, dayCurrentCount);
                            }                                 
                     }                                        
                 }
                    if(monthCurrentName!=null&&monthCurrentName.equals(monthName))// last word
                      {
                         if(dayCurrentName!=null&&dayCurrentName.equals(dayName))// last word
                         {
                             map.put(monthName.substring(monthName.length()-6)+dayCurrentName, dayCurrentCount);
                         }                            
                             if(monthCurrentCount>100000)
                             {
                                 String currentName = monthCurrentName.substring(0, monthCurrentName.length()-6);
                                 System.out.print(monthCurrentCount+"\t"+currentName);
                                 ArrayList mapList = new ArrayList<> (map.entrySet());
                                 List<Map.Entry<String, Integer>> mapEntry = mapList;
                                 Collections.sort(mapEntry, new Comparator<Map.Entry<String, Integer>>()
                                 {
                                    public int compare(Map.Entry<String, Integer> map1, Map.Entry<String, Integer> map2) 
                                    {
                                        int e = map1.getKey().compareTo(map2.getKey());
                                        return e;
                                    }});
                                 for (Map.Entry<String, Integer> tem : mapEntry) 
                                 {
                                 String date = tem.getKey();
                                 int  countViews = tem.getValue();
                                 System.out.print("\t" + date + ":" + countViews);
                                }
                             }        
                      }    
              }// TODO code application logic here
    }
    
}
